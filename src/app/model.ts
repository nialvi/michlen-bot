import { injectable, inject, TYPES } from '../composition/index.js';

import { Bot } from '../bot/model.js';
import { Logger } from '../logger/index.js';
import { Place } from '../place/index.js';

import { places as mockPlaces } from '../seed.js';

export interface Application {
	start(): void;
	stop(message: string): void;
}

enum Buttons {
	PLASE_LIST = 'üìú –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç',
	WHERE_GO = 'üìç –ö—É–¥–∞ –∏–¥–µ–º',
	ADD_PLACE = 'üìç –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ',
	SEED = '/seedplaces',
}

@injectable()
export class AppModel implements Application {
	constructor(
		@inject(TYPES.Logger) private logger: Logger,
		@inject(TYPES.Bot) private bot: Bot,
		@inject(TYPES.Place) private place: Place,
	) {}

	start() {
		this.logger.info('BOT IS STARTED üöÄ');

		this.bot.launch();

		this.initRouter();
	}

	stop(message: string): void {
		this.bot.stop(message);
	}

	initRouter(): void {
		const telegramBot = this.bot.getInstance();

		telegramBot.command('start', async (ctx) => {
			this.logger.info('message is recieved', ctx.update.message.text);

			ctx.reply(
				[
					'‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è Michlen',
					'–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç –∫—É–¥–∞ –º–æ–∂–Ω–æ —Å—Ö–æ–¥–∏—Ç—å',
					'/help - –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
				].join('\n\n'),
				{
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: Buttons.PLASE_LIST,
									callback_data: Buttons.PLASE_LIST,
								},
								{
									text: Buttons.WHERE_GO,
									callback_data: Buttons.WHERE_GO,
								},
							],
						],
					},
				},
			);
		});

		telegramBot.action(Buttons.PLASE_LIST, async (ctx) => {
			this.logger.info('button dishes list is pressed');

			const places = await this.place.showPlaces();

			if (places.length > 0) {
				ctx.reply(places.join('\n'));
			} else {
				ctx.reply('ü´• –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç');
			}
		});

		telegramBot.action(Buttons.ADD_PLACE, async (ctx) => {
			this.logger.info('button add place is pressed');

			const result = await this.place.addPlace();

			ctx.reply(result ? '‚úçÔ∏è –ì–æ—Ç–æ–≤–æ' : 'ü§î –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—è');

			// buttonList(bot, logger, firebaseService, Buttons.ADD_PLACE);
		});

		telegramBot.action(Buttons.WHERE_GO, (ctx) => {
			this.logger.info('button where to go is pressed');

			ctx.reply('ü•© –ñ–∞–∂–¥–∞ –∫—Ä–æ–≤–∏');
		});

		telegramBot.hears(Buttons.SEED, async (ctx) => {
			this.logger.info('button seed is pressed');

			const result = await this.place.seed(mockPlaces);

			ctx.reply('seed result: ' + result);
		});

		telegramBot.help((ctx) => {
			ctx.replyWithHTML(
				[
					'<b>–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>',
					'/start - –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞',
					'/find - –ø–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é',
					'/help - —Å–ø—Ä–∞–≤–∫–∞',
				].join('\n\n'),
			);
		});

		telegramBot.command('find', (ctx) => {
			this.logger.info('find command', ctx);
			ctx.reply('find command');
		});

		telegramBot.on('inline_query', async (ctx) => {
			this.logger.info('inline query', ctx.inlineQuery);

			const places = await this.place.showPlaces();

			await ctx.telegram.answerInlineQuery(
				ctx.inlineQuery.id,
				places.map((place) => ({
					type: 'article',
					title: place,
					id: place,
					input_message_content: {
						message_text: `${place} \n\n —Ç—É—Ç –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ`,
					},
				})),
			);
		});
	}
}
